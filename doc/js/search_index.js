var search_data = {"index":{"searchIndex":["bio","db","pileup","vcf","util","gngm","alternatives()","calculate_clusters()","calculate_densities()","calculate_signal()","close()","clusters()","collect_threads()","densities()","discordant_chastity()","draw_bands()","draw_hit_count()","draw_peaks()","draw_signal()","draw_threads()","frequency_histogram()","get_band()","get_insert_size_frequency()","get_unmapped_mate_frequency()","gq()","has_just_one_variant?()","hit_count()","is_deletion?()","is_indel?()","is_insertion?()","is_snp?()","mq()","new()","non_ref_allele_count()","non_ref_allele_freq()","pass_quality?()","peaks()","pl()","signal()","snp_positions()","threads()","to_s()","used_depth()","variant?()","license"],"longSearchIndex":["bio","bio::db","bio::db::pileup","bio::db::vcf","bio::util","bio::util::gngm","bio::db::vcf#alternatives()","bio::util::gngm#calculate_clusters()","bio::util::gngm#calculate_densities()","bio::util::gngm#calculate_signal()","bio::util::gngm#close()","bio::util::gngm#clusters()","bio::util::gngm#collect_threads()","bio::util::gngm#densities()","bio::db::pileup#discordant_chastity()","bio::util::gngm#draw_bands()","bio::util::gngm#draw_hit_count()","bio::util::gngm#draw_peaks()","bio::util::gngm#draw_signal()","bio::util::gngm#draw_threads()","bio::util::gngm#frequency_histogram()","bio::util::gngm#get_band()","bio::util::gngm#get_insert_size_frequency()","bio::util::gngm#get_unmapped_mate_frequency()","bio::db::vcf#gq()","bio::db::vcf#has_just_one_variant?()","bio::util::gngm#hit_count()","bio::db::vcf#is_deletion?()","bio::db::vcf#is_indel?()","bio::db::vcf#is_insertion?()","bio::db::pileup#is_snp?()","bio::db::vcf#mq()","bio::util::gngm::new()","bio::db::vcf#non_ref_allele_count()","bio::db::vcf#non_ref_allele_freq()","bio::db::vcf#pass_quality?()","bio::util::gngm#peaks()","bio::db::vcf#pl()","bio::util::gngm#signal()","bio::util::gngm#snp_positions()","bio::util::gngm#threads()","bio::db::vcf#to_s()","bio::db::vcf#used_depth()","bio::db::vcf#variant?()",""],"info":[["Bio","","Bio.html","",""],["Bio::DB","","Bio/DB.html","",""],["Bio::DB::Pileup","","Bio/DB/Pileup.html","","<p>Extends the methods of the Bio::DB::Pileup class in bio-samtools. A pileup\nobject represents the SAMtools …\n"],["Bio::DB::Vcf","","Bio/DB/Vcf.html","","<p>Extends the methods of the Bio::DB::Vcf class in bio-samtools. A Vcf object\nrepresents the VCF format …\n"],["Bio::Util","","Bio/Util.html","",""],["Bio::Util::Gngm","","Bio/Util/Gngm.html","","<p>A Bio::Util::Gngm object represents a single region on a reference genome\nthat is to be examined using …\n"],["alternatives","Bio::DB::Vcf","Bio/DB/Vcf.html#method-i-alternatives","()","<p>List of alternate alleles at this locus, obtained by splitting the vcf.alt\nattribute string on commas …\n"],["calculate_clusters","Bio::Util::Gngm","Bio/Util/Gngm.html#method-i-calculate_clusters","( opts={} )","<p>Calculates the k-means clusters of density curves (groups threads into\nbands), [density curve y values] …\n"],["calculate_densities","Bio::Util::Gngm","Bio/Util/Gngm.html#method-i-calculate_densities","(adjust=1)","<p>Sets and returns the array of arrays <code>[window, [density curve x\nvalues], [density curve y values] ]</code> Calculates …\n"],["calculate_signal","Bio::Util::Gngm","Bio/Util/Gngm.html#method-i-calculate_signal","()","<p>Returns an array of values representing the ratio of average of the\nexpected threads/windows to the control …\n"],["close","Bio::Util::Gngm","Bio/Util/Gngm.html#method-i-close","()","<p>for BAM files calls Bio::DB::Sam#close to close the connections to input\nfiles safely\n"],["clusters","Bio::Util::Gngm","Bio/Util/Gngm.html#method-i-clusters","(opts={})","<p>Returns the array instance variable @clusters. The R function +kmeans()+ is\nused to calculate the clusters …\n"],["collect_threads","Bio::Util::Gngm","Bio/Util/Gngm.html#method-i-collect_threads","(opts=@opts[:threads])","<p>Resets contents of instance variable @threads and returns an array of\narrays <code>[[window 1, snp position</code> …\n"],["densities","Bio::Util::Gngm","Bio/Util/Gngm.html#method-i-densities","(adjust=1)","<p>Returns the instance variable @densities array of arrays <code>[window,\n[density curve x values], [density</code> …\n"],["discordant_chastity","Bio::DB::Pileup","Bio/DB/Pileup.html#method-i-discordant_chastity","()","<p>calculates the discordant chastity statistic as defined in Austin et al\n(2011) bar.utoronto.ca/ngm/description.html …\n"],["draw_bands","Bio::Util::Gngm","Bio/Util/Gngm.html#method-i-draw_bands","(file=\"myfile.png\", optsa={})","<p>Draws the clustered bands that correspond to the expected and control\nwindow in a single PNG file <code>file</code> …\n"],["draw_hit_count","Bio::Util::Gngm","Bio/Util/Gngm.html#method-i-draw_hit_count","(file=\"myfile.png\",opts=@opts[:graphics])","<p>Draws a barplot of the number of polymorphisms in each thread/window in a\nsingle PNG file <code>file</code>\n"],["draw_peaks","Bio::Util::Gngm","Bio/Util/Gngm.html#method-i-draw_peaks","(file=\"myfile.png\",opts=@opts[:graphics])","<p>Draws the peaks calculated from the signal curve by the R function\n<code>Peaks</code> in Bio::Util::Gngm#calculate_peaks …\n"],["draw_signal","Bio::Util::Gngm","Bio/Util/Gngm.html#method-i-draw_signal","(file=\"myfile.png\", opts=@opts[:graphics])","<p>Draws the contents of the @signal instance variable  in a single PNG file\n<code>file</code>\n"],["draw_threads","Bio::Util::Gngm","Bio/Util/Gngm.html#method-i-draw_threads","(file=\"myfile.png\", options={})","<p>Draws the threads in a single PNG file <code>file</code>\n<p>Options and defaults\n<p><code>:draw_legend =&gt; nil</code> -if a filename ...\n"],["frequency_histogram","Bio::Util::Gngm","Bio/Util/Gngm.html#method-i-frequency_histogram","(file=\"myfile.png\", bin_width=@opts[:histo_bin_width], opts=@opts[:graphics])","<p>Draws a histogram of polymorphism frequencies across the reference genome\nsection defined in Bio::Util::Gngm#initialize …\n"],["get_band","Bio::Util::Gngm","Bio/Util/Gngm.html#method-i-get_band","(window=1.0)","<p>gets an array of windows that cluster with a given window\n"],["get_insert_size_frequency","Bio::Util::Gngm","Bio/Util/Gngm.html#method-i-get_insert_size_frequency","(options={})","<p>Returns array of arrays <code>[[window start position, proportion of\nalignments &gt; insert size]]</code>. Does this …\n"],["get_unmapped_mate_frequency","Bio::Util::Gngm","Bio/Util/Gngm.html#method-i-get_unmapped_mate_frequency","(options={})","<p>Returns array of arrays <code>[[window start position, proportion of reads\nwith unmapped mates]]</code>. Does this …\n"],["gq","Bio::DB::Vcf","Bio/DB/Vcf.html#method-i-gq","()","<p>Returns the genotype quality score from the sample data (as defined by the\nVcf GQ attribute) for the …\n"],["has_just_one_variant?","Bio::DB::Vcf","Bio/DB/Vcf.html#method-i-has_just_one_variant-3F","()","<p>Returns true if only one variant allele is recorded. Loci with more than\none allele are too complicated …\n"],["hit_count","Bio::Util::Gngm","Bio/Util/Gngm.html#method-i-hit_count","()","<p>Returns an array of polymorphisms in each thread/window &lt;tt&gt;[[window,\npolymorphism count] ]. Useful …\n"],["is_deletion?","Bio::DB::Vcf","Bio/DB/Vcf.html#method-i-is_deletion-3F","(options)","<p>Returns true if the length of the alt column is less than that of the ref\ncolumn in the Vcf and if Vcf.pass_quality? …\n"],["is_indel?","Bio::DB::Vcf","Bio/DB/Vcf.html#method-i-is_indel-3F","(opts)","<p>Returns true if either Vcf.is_insertion? or Vcf.is_deletion? is true\n"],["is_insertion?","Bio::DB::Vcf","Bio/DB/Vcf.html#method-i-is_insertion-3F","(options)","<p>Returns true if the length of the alt column is greater than that of the\nref column in the Vcf and if …\n"],["is_snp?","Bio::DB::Pileup","Bio/DB/Pileup.html#method-i-is_snp-3F","(opts)","<p>returns true if self is a SNP with minimum coverage depth of\n<code>:min_depth</code> and minimum non-reference bases …\n"],["mq","Bio::DB::Vcf","Bio/DB/Vcf.html#method-i-mq","()","<p>Returns the mean Mapping Quality from the reads over this position as\ndefined by the Vcf MQ attribute. …\n"],["new","Bio::Util::Gngm","Bio/Util/Gngm.html#method-c-new","(options)","<p>Returns a new Bio::Util::Gngm object.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">g</span> = <span class=\"ruby-constant\">Bio</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Util</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Gngm</span>.<span class=\"ruby-identifier\">new</span>(:<span class=\"ruby-identifier\">file</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;aln.sort.bam&quot;</span>, \n            :<span class=\"ruby-identifier\">format</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["non_ref_allele_count","Bio::DB::Vcf","Bio/DB/Vcf.html#method-i-non_ref_allele_count","()","<p>Returns the depth of reads containing the non reference allele. IE the sum\nof the last two figures in …\n"],["non_ref_allele_freq","Bio::DB::Vcf","Bio/DB/Vcf.html#method-i-non_ref_allele_freq","()","<p>Returns the non-reference allele frequency based on depth of reads used for\nthe genotype call,\n<p>IE\n\n<pre>vcf.non_ref_allele_count ...</pre>\n"],["pass_quality?","Bio::DB::Vcf","Bio/DB/Vcf.html#method-i-pass_quality-3F","(options)","<p>Returns true if the position passes criteria\n<p>Options and Defaults:\n<p>:min_depth =&gt; 2\n"],["peaks","Bio::Util::Gngm","Bio/Util/Gngm.html#method-i-peaks","()","<p>Returns the positions of the peaks in the signal curve calculated by\nBio::Util::Gngm#get_peaks as an …\n"],["pl","Bio::DB::Vcf","Bio/DB/Vcf.html#method-i-pl","()","<p>Returns the phred scaled likelihood of the first non-reference allele (as\ndefined by the Vcf PL attribute) …\n"],["signal","Bio::Util::Gngm","Bio/Util/Gngm.html#method-i-signal","()",""],["snp_positions","Bio::Util::Gngm","Bio/Util/Gngm.html#method-i-snp_positions","(optsa={})","<p>Returns array of arrays <code>[[position, statistic]]</code> for\npolymorphisms passing filters in <code>optsa</code> Default options …\n"],["threads","Bio::Util::Gngm","Bio/Util/Gngm.html#method-i-threads","(opts=@opts[:threads])","<p>Returns contents of @threads, an array of arrays <code>[[window 1, snp\nposition 1, snp position 2 ... snp position</code> …\n"],["to_s","Bio::DB::Vcf","Bio/DB/Vcf.html#method-i-to_s","()","<p>Return a short string representing chromosome, position, reference\nsequence, alt sequence(s) and the …\n"],["used_depth","Bio::DB::Vcf","Bio/DB/Vcf.html#method-i-used_depth","()","<p>The depth of reads actually used in the genotype call by Vcftools. The sum\nof the DP4 attribute. Returns …\n"],["variant?","Bio::DB::Vcf","Bio/DB/Vcf.html#method-i-variant-3F","()","<p>returns true if the <code>alt</code> column of the Vcf is not\n<strong>.</strong>\n<p>Examples\n<p>vcf record = 20     14370   rs6054257 G   …\n"],["LICENSE","","LICENSE_txt.html","","<p>Copyright © 2011 Dan MacLean\n<p>Permission is hereby granted, free of charge, to any person obtaining a …\n"]]}}